package ch.epicerielacanopee.statistics.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MouvementsStockAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementsStockAllPropertiesEquals(MouvementsStock expected, MouvementsStock actual) {
        assertMouvementsStockAutoGeneratedPropertiesEquals(expected, actual);
        assertMouvementsStockAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementsStockAllUpdatablePropertiesEquals(MouvementsStock expected, MouvementsStock actual) {
        assertMouvementsStockUpdatableFieldsEquals(expected, actual);
        assertMouvementsStockUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementsStockAutoGeneratedPropertiesEquals(MouvementsStock expected, MouvementsStock actual) {
        assertThat(expected)
            .as("Verify MouvementsStock auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementsStockUpdatableFieldsEquals(MouvementsStock expected, MouvementsStock actual) {
        assertThat(expected)
            .as("Verify MouvementsStock relevant properties")
            .satisfies(e -> assertThat(e.getEpicerioId()).as("check epicerioId").isEqualTo(actual.getEpicerioId()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getLastUpdatedDate()).as("check lastUpdatedDate").isEqualTo(actual.getLastUpdatedDate()))
            .satisfies(e -> assertThat(e.getImportedDate()).as("check importedDate").isEqualTo(actual.getImportedDate()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getUtilisateur()).as("check utilisateur").isEqualTo(actual.getUtilisateur()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getEpicerioMouvement()).as("check epicerioMouvement").isEqualTo(actual.getEpicerioMouvement()))
            .satisfies(e -> assertThat(e.getMouvement()).as("check mouvement").isEqualTo(actual.getMouvement()))
            .satisfies(e -> assertThat(e.getSolde()).as("check solde").isEqualTo(actual.getSolde()))
            .satisfies(e -> assertThat(e.getVente()).as("check vente").isEqualTo(actual.getVente()))
            .satisfies(e -> assertThat(e.getCodeProduit()).as("check codeProduit").isEqualTo(actual.getCodeProduit()))
            .satisfies(e -> assertThat(e.getProduit()).as("check produit").isEqualTo(actual.getProduit()))
            .satisfies(e -> assertThat(e.getResponsableProduit()).as("check responsableProduit").isEqualTo(actual.getResponsableProduit()))
            .satisfies(e -> assertThat(e.getFournisseurProduit()).as("check fournisseurProduit").isEqualTo(actual.getFournisseurProduit()))
            .satisfies(e -> assertThat(e.getCodeFournisseur()).as("check codeFournisseur").isEqualTo(actual.getCodeFournisseur()))
            .satisfies(e -> assertThat(e.getReduction()).as("check reduction").isEqualTo(actual.getReduction()))
            .satisfies(e -> assertThat(e.getPonderation()).as("check ponderation").isEqualTo(actual.getPonderation()))
            .satisfies(e -> assertThat(e.getVenteChf()).as("check venteChf").isEqualTo(actual.getVenteChf()))
            .satisfies(e -> assertThat(e.getValeurChf()).as("check valeurChf").isEqualTo(actual.getValeurChf()))
            .satisfies(e -> assertThat(e.getRemarques()).as("check remarques").isEqualTo(actual.getRemarques()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMouvementsStockUpdatableRelationshipsEquals(MouvementsStock expected, MouvementsStock actual) {
        // empty method
    }
}
